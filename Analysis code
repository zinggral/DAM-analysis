import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import scipy.stats as stats
import scikit_posthocs as sp
import statsmodels.stats.multicomp as mc


# replace file paths in line 28 (experimental line), 42 (control 1), 56 (control 2)
# exclude columns if necessary (column number = DAM number +9): line 34 (experimental line), 48 (control 1), 62 (control 2)


printing = input("print data?")
conditions = input("conditions e.g. LD 12:12")
row_middle_of_night_first_day = int(input("row middle of night first day"))
number_of_total_lines = int(input("number of total lines"))
distance_middle_of_night = int(input("number of lines from 0:00 (included) until middle of night (excluded)"))
name_ex = input("name experimental line")
n_ex = int(input("n experimental line"))
name_c1 = input("name first control")
n_c1 = int(input("n first control"))
name_c2 = input("name second control")
n_c2 = int(input("n second control"))


# data experimental line
ex = pd.read_csv(r"file_path",
                                engine='python',
                                header=None,
                                sep="\t", 
                                skiprows= (row_middle_of_night_first_day + 4*1440)-1,
                                skipfooter= (number_of_total_lines-(row_middle_of_night_first_day + 9*1440))+1,
                                usecols=[1,2,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) 
if printing == "yes":
        print(ex)
elif printing == "no":
        pass


# data control 1 (GAL4)
c1 = pd.read_csv(r"file_path",
                                engine='python',
                                header=None,
                                sep="\t", 
                                skiprows= (row_middle_of_night_first_day + 4*1440)-1,
                                skipfooter= (number_of_total_lines-(row_middle_of_night_first_day + 9*1440))+1,
                                usecols=[1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) 
if printing == "yes":
        print(c1)
elif printing == "no":
        pass


# data control 2 (UAS)
c2 = pd.read_csv(r"file_path",
                                engine='python',
                                header=None,
                                sep="\t", 
                                skiprows= (row_middle_of_night_first_day + 4*1440)-1,
                                skipfooter= (number_of_total_lines-(row_middle_of_night_first_day + 9*1440))+1,
                                usecols=[1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) 
if printing == "yes":
        print(c2)
elif printing == "no":
        pass


# data processing
def process_activity_data(df, n, group_label, printing="no"):
    columns_to_average = [col for col in range(10, 42) if col in df.columns]
    average_days = df.groupby(2)[columns_to_average].mean()
    
    if printing == "yes":
        print(average_days)
    elif printing == "no":
            pass
    
    rows_to_average = columns_to_average
    average_day = average_days[rows_to_average].mean(axis=1)
    std = average_days[rows_to_average].std(axis=1)
    se = std / np.sqrt(n)
    
    first_rows = average_day.head(distance_middle_of_night)
    remaining = average_day.tail(len(average_day) - distance_middle_of_night)
    average_day = pd.concat([remaining, first_rows]).reset_index(drop=True)
    average_day_df = pd.DataFrame({2: average_day.index + 1, 0: average_day})
    
    first_rows_se = se.head(distance_middle_of_night)
    remaining_se = se.tail(len(se) - distance_middle_of_night)
    se = pd.concat([remaining_se, first_rows_se]).reset_index(drop=True)
    se_df = pd.DataFrame({2: se.index + 1, 0: se})
    
    avg_extended = pd.concat([average_day_df.iloc[-5:], average_day_df, average_day_df.iloc[:5]], ignore_index=True)
    norm_avg_extended = avg_extended[0].rolling(window=11, center=True).mean()
    norm_avg = norm_avg_extended.iloc[5:-5].values
    
    se_extended = pd.concat([se_df.iloc[-5:], se_df, se_df.iloc[:5]], ignore_index=True)
    norm_se_extended = se_extended[0].rolling(window=11, center=True).mean()
    norm_se = norm_se_extended.iloc[5:-5].values
    
    norm_se_pos = norm_avg + norm_se
    norm_se_neg = norm_avg - norm_se
    
    norm_avg_df = pd.DataFrame({f'normalised_average_day_{group_label}': norm_avg, 'index': average_day_df.index + 1})
    norm_se_pos_df = pd.DataFrame({f'normalised_se_pos_{group_label}': norm_se_pos, 'index': se_df.index + 1})
    norm_se_neg_df = pd.DataFrame({f'normalised_se_neg_{group_label}': norm_se_neg, 'index': se_df.index + 1})
    
    activity_df = pd.DataFrame({
        "minutes": average_day_df.index + 1,
        f"normalised_se_neg_{group_label}": norm_se_neg_df[f'normalised_se_neg_{group_label}'],
        f"normalised_average_day_{group_label}": norm_avg_df[f'normalised_average_day_{group_label}'],
        f"normalised_se_pos_{group_label}": norm_se_pos_df[f'normalised_se_pos_{group_label}']
    })
    
    if printing == "yes":
        print(activity_df)
    elif printing == "no":
            pass
    
    return {
        f"average_day_{group_label}": average_day_df,
        f"se_{group_label}": se_df,
        f"normalised_average_day_{group_label}": norm_avg_df,
        f"normalised_se_pos_{group_label}": norm_se_pos_df,
        f"normalised_se_neg_{group_label}": norm_se_neg_df,
        f"activity_{group_label}": activity_df
    }


# analysis experimental line
if printing == "yes":
    results_ex = process_activity_data(ex, n_ex, "ex", printing="yes")
    average_day_ex = results_ex["average_day_ex"]
    se_ex = results_ex["se_ex"]
    normalised_average_day_ex = results_ex["normalised_average_day_ex"]
    normalised_se_pos_ex = results_ex["normalised_se_pos_ex"]
    normalised_se_neg_ex = results_ex["normalised_se_neg_ex"]
    activity_ex = results_ex["activity_ex"]
elif printing == "no":
    results_ex = process_activity_data(ex, n_ex, "ex", printing="no")
    average_day_ex = results_ex["average_day_ex"]
    se_ex = results_ex["se_ex"]
    normalised_average_day_ex = results_ex["normalised_average_day_ex"]
    normalised_se_pos_ex = results_ex["normalised_se_pos_ex"]
    normalised_se_neg_ex = results_ex["normalised_se_neg_ex"]
    activity_ex = results_ex["activity_ex"]


# analysis first control
if printing == "yes":
    results_c1 = process_activity_data(c1, n_c1, "c1", printing="yes")
    average_day_c1 = results_c1["average_day_c1"]
    se_c1 = results_c1["se_c1"]
    normalised_average_day_c1 = results_c1["normalised_average_day_c1"]
    normalised_se_pos_c1 = results_c1["normalised_se_pos_c1"]
    normalised_se_neg_c1 = results_c1["normalised_se_neg_c1"]
    activity_c1 = results_c1["activity_c1"]
elif printing == "no":
    results_c1 = process_activity_data(c1, n_c1, "c1", printing="no")
    average_day_c1 = results_c1["average_day_c1"]
    se_c1 = results_c1["se_c1"]
    normalised_average_day_c1 = results_c1["normalised_average_day_c1"]
    normalised_se_pos_c1 = results_c1["normalised_se_pos_c1"]
    normalised_se_neg_c1 = results_c1["normalised_se_neg_c1"]
    activity_c1 = results_c1["activity_c1"]


# analysis second control
if printing == "yes":
    results_c2 = process_activity_data(c2, n_c2, "c2", printing="yes")
    average_day_c2 = results_c2["average_day_c2"]
    se_c2 = results_c2["se_c2"]
    normalised_average_day_c2 = results_c2["normalised_average_day_c2"]
    normalised_se_pos_c2 = results_c2["normalised_se_pos_c2"]
    normalised_se_neg_c2 = results_c2["normalised_se_neg_c2"]
    activity_c2 = results_c2["activity_c2"]
elif printing == "no":
    results_c2 = process_activity_data(c2, n_c2, "c2", printing="no")
    average_day_c2 = results_c2["average_day_c2"]
    se_c2 = results_c2["se_c2"]
    normalised_average_day_c2 = results_c2["normalised_average_day_c2"]
    normalised_se_pos_c2 = results_c2["normalised_se_pos_c2"]
    normalised_se_neg_c2 = results_c2["normalised_se_neg_c2"]
    activity_c2 = results_c2["activity_c2"]


# comparison
activity_comparison = pd.DataFrame({
    "minutes": average_day_ex.index +1,
    "normalised_average_day_ex": normalised_average_day_ex["normalised_average_day_ex"],
    "normalised_average_day_c1": normalised_average_day_c1["normalised_average_day_c1"],
    "normalised_average_day_c2": normalised_average_day_c2["normalised_average_day_c2"]})
if printing == "yes":
        print(activity_comparison)
elif printing == "no":
        pass


# formatting for diagrams
activity_max = pd.DataFrame({
    "minutes": average_day_ex.index +1,
    "normalised_se_pos_ex": normalised_se_pos_ex["normalised_se_pos_ex"],
    "normalised_se_pos_c1": normalised_se_pos_c1["normalised_se_pos_c1"],
    "normalised_se_pos_c2": normalised_se_pos_c2["normalised_se_pos_c2"]})
global_ymax = 0
current_max = activity_max[["normalised_se_pos_ex", "normalised_se_pos_c1", "normalised_se_pos_c2"]].max()
if (current_max > global_ymax).any():
        global_ymax = current_max


# diagram experimental line
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(activity_ex["minutes"], activity_ex["normalised_average_day_ex"], label="mean", color="black")
ax.plot(activity_ex["minutes"], activity_ex["normalised_se_neg_ex"], label="SE", color="red", linestyle="solid")
ax.plot(activity_ex["minutes"], activity_ex["normalised_se_pos_ex"], color="red", linestyle="solid")
ax.set_xlabel("Zeitgeber time [h]")
ax.set_ylabel("mean activity [beam crosses/ minute]")
ax.legend()
ax.set_xlim([0, 1440])
ax.set_ylim(bottom=0, top=global_ymax.max() + 0.2)
ax.set_xticks(np.arange(0, 1441, 60), minor=True)
ax.set_title(name_ex, fontsize=14, fontweight='bold')
if conditions in ["LD 12:12", "RD 12:12"]: 
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] >= 360) & (activity_ex["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] < 360),
        color='black',
        alpha=0.5
        )
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] > 1080),
        color='black',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
elif conditions == "LM 12:12": 
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] >= 360) & (activity_ex["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] < 360),
        color='grey',
        alpha=0.5
        )
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] > 1080),
        color='grey',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
elif conditions in ["LD 20:04", "RD 20:04"]:
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] >= 120) & (activity_ex["minutes"] <= 1320),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] < 120),
        color='black',
        alpha=0.5
        )
    ax.fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] > 1320),
        color='black',
        alpha=0.5
        )
    custom_xticks = [120, 360, 600, 840, 1080, 1320]  
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
else: print("error conditions not defined")


# diagram control 1 (GAL4)
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(activity_c1["minutes"], activity_c1["normalised_average_day_c1"], label="mean", color="black")
ax.plot(activity_c1["minutes"], activity_c1["normalised_se_neg_c1"], label="SE", color="red", linestyle="solid")
ax.plot(activity_c1["minutes"], activity_c1["normalised_se_pos_c1"], color="red", linestyle="solid")
ax.set_xlabel("Zeitgeber time [h]")
ax.set_ylabel("mean activity [beam crosses/ minute]")
ax.legend()
ax.set_xlim([0, 1440])
ax.set_ylim(bottom=0, top=global_ymax.max() + 0.2)
ax.set_xticks(np.arange(0, 1441, 60), minor=True)
ax.set_title(name_c1, fontsize=14, fontweight='bold')
if conditions in ["LD 12:12", "RD 12:12"]: 
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] >= 360) & (activity_c1["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] < 360),
        color='black',
        alpha=0.5
        )
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] > 1080),
        color='black',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
elif conditions == "LM 12:12": 
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] >= 360) & (activity_c1["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] < 360),
        color='grey',
        alpha=0.5
        )
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] > 1080),
        color='grey',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
elif conditions in ["LD 20:04", "RD 20:04"]:
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] >= 120) & (activity_c1["minutes"] <= 1320),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] < 120),
        color='black',
        alpha=0.5
        )
    ax.fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] > 1320),
        color='black',
        alpha=0.5
        )
    custom_xticks = [120, 360, 600, 840, 1080, 1320]  
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
else: print("error conditions not defined")


# diagram control 2 (UAS)
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(activity_c2["minutes"], activity_c2["normalised_average_day_c2"], label="mean", color="black")
ax.plot(activity_c2["minutes"], activity_c2["normalised_se_neg_c2"], label="SE", color="red", linestyle="solid")
ax.plot(activity_c2["minutes"], activity_c2["normalised_se_pos_c2"], color="red", linestyle="solid")
ax.set_xlabel("Zeitgeber time [h]")
ax.set_ylabel("mean activity [beam crosses/ minute]")
ax.legend()
ax.set_xlim([0, 1440])
ax.set_ylim(bottom=0, top=global_ymax.max() + 0.2)
ax.set_xticks(np.arange(0, 1441, 60), minor=True)
ax.set_title(name_c2, fontsize=14, fontweight='bold')
if conditions in ["LD 12:12", "RD 12:12"]: 
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] >= 360) & (activity_c2["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] < 360),
        color='black',
        alpha=0.5
        )
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] > 1080),
        color='black',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
elif conditions == "LM 12:12": 
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] >= 360) & (activity_c2["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] < 360),
        color='grey',
        alpha=0.5
        )
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] > 1080),
        color='grey',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
elif conditions in ["LD 20:04", "RD 20:04"]:
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] >= 120) & (activity_c2["minutes"] <= 1320),
        color='yellow',
        alpha=0.5
        )
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] < 120),
        color='black',
        alpha=0.5
        )
    ax.fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] > 1320),
        color='black',
        alpha=0.5
        )
    custom_xticks = [120, 360, 600, 840, 1080, 1320]  
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
else: print("error conditions not defined")


# diagram comparison
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(activity_ex["minutes"], activity_ex["normalised_average_day_ex"], label=name_ex + " n = " + str(n_ex), color="red", zorder=3)
ax.plot(activity_c1["minutes"], activity_c1["normalised_average_day_c1"], label=name_c1 + " n = " + str(n_c1), color="dimgrey", linestyle="solid", zorder=2)
ax.plot(activity_c2["minutes"], activity_c2["normalised_average_day_c2"], label=name_c2 + " n = " + str(n_c2), color="silver", linestyle="solid", zorder=2)
ax.set_xlabel("Zeitgeber time [h]")
ax.set_ylabel("mean activity [beam crosses/ minute]")
ax.legend()
ax.set_xlim([0, 1440])
ax.set_ylim(bottom=0, top=global_ymax.max() + 0.1)
ax.set_xticks(np.arange(0, 1441, 60), minor=True)
plt.title("comparison", fontsize=14, fontweight="bold", pad=27)
if conditions == "LD 12:12": 
    ax.axvline(x=360, color='black', linestyle='solid', linewidth=0.5)
    ax.axvline(x=1080, color='black', linestyle='solid', linewidth=0.5)
    plt.axvspan(360, 390, color='indianred', alpha=0.2)
    plt.axvspan(1080, 1110, color='indianred', alpha=0.2)
    plt.axvspan(180, 360, color='mediumseagreen', alpha=0.2)
    plt.axvspan(360, 540, color='lightgreen', alpha=0.2)
    plt.axvspan(900, 1080, color='steelblue', alpha=0.2)
    plt.axvspan(1080, 1260, color='lightskyblue', alpha=0.2)
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
    fig.patch.set_facecolor('white')
    fig.add_artist(plt.Rectangle((0.125, 0.90), 0.194, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.706, 0.90), 0.194, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.319, 0.90), 0.387, 0.02, transform=fig.transFigure, edgecolor="black", facecolor="white", clip_on=False))
elif conditions == "RD 12:12": 
    ax.axvline(x=360, color='black', linestyle='solid', linewidth=0.5)
    ax.axvline(x=1080, color='black', linestyle='solid', linewidth=0.5)
    plt.axvspan(360, 390, color='indianred', alpha=0.2)
    plt.axvspan(1080, 1110, color='indianred', alpha=0.2)
    plt.axvspan(180, 360, color='mediumseagreen', alpha=0.2)
    plt.axvspan(360, 540, color='lightgreen', alpha=0.2)
    plt.axvspan(900, 1080, color='steelblue', alpha=0.2)
    plt.axvspan(1080, 1260, color='lightskyblue', alpha=0.2)
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
    fig.patch.set_facecolor('white')
    fig.add_artist(plt.Rectangle((0.125, 0.90), 0.194, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.706, 0.90), 0.194, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.319, 0.90), 0.387, 0.02, transform=fig.transFigure, edgecolor="darkred", facecolor="darkred", clip_on=False))
elif conditions == "LM 12:12": 
    ax.axvline(x=360, color='black', linestyle='solid', linewidth=0.5)
    ax.axvline(x=1080, color='black', linestyle='solid', linewidth=0.5)
    plt.axvspan(360, 390, color='indianred', alpha=0.2)
    plt.axvspan(1080, 1110, color='indianred', alpha=0.2)
    plt.axvspan(180, 360, color='mediumseagreen', alpha=0.2)
    plt.axvspan(360, 540, color='lightgreen', alpha=0.2)
    plt.axvspan(900, 1080, color='steelblue', alpha=0.2)
    plt.axvspan(1080, 1260, color='lightskyblue', alpha=0.2)
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels)
    fig.patch.set_facecolor('white')
    fig.add_artist(plt.Rectangle((0.125, 0.90), 0.194, 0.02, transform=fig.transFigure, color="grey", clip_on=False))
    fig.add_artist(plt.Rectangle((0.706, 0.90), 0.194, 0.02, transform=fig.transFigure, color="grey", clip_on=False))
    fig.add_artist(plt.Rectangle((0.319, 0.90), 0.387, 0.02, transform=fig.transFigure, edgecolor="grey", facecolor="white", clip_on=False))
elif conditions == "LD 20:04":
    ax.axvline(x=120, color='black', linestyle='solid', linewidth=0.5)
    ax.axvline(x=1320, color='black', linestyle='solid', linewidth=0.5)
    plt.axvspan(120, 150, color='indianred', alpha=0.2)
    plt.axvspan(1320, 1350, color='indianred', alpha=0.2)
    plt.axvspan(0, 120, color='mediumseagreen', alpha=0.2)
    plt.axvspan(120, 240, color='lightgreen', alpha=0.2)
    plt.axvspan(780, 900, color="blueviolet", alpha=0.2)
    plt.axvspan(1020, 1140, color="orchid", alpha=0.2)
    plt.axvspan(1200, 1320, color='steelblue', alpha=0.2)
    plt.axvspan(1320, 1440, color='lightskyblue', alpha=0.2)
    custom_xticks = [120, 360, 600, 840, 1080, 1320] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels) 
    fig.patch.set_facecolor('white')
    fig.add_artist(plt.Rectangle((0.125, 0.90), 0.064666, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.834666, 0.90), 0.064666, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.189666, 0.90), 0.645, 0.02, transform=fig.transFigure, edgecolor="black", facecolor="white", clip_on=False))
elif conditions == "RD 20:04":
    ax.axvline(x=120, color='black', linestyle='solid', linewidth=0.5)
    ax.axvline(x=1320, color='black', linestyle='solid', linewidth=0.5)
    plt.axvspan(120, 150, color='indianred', alpha=0.2)
    plt.axvspan(1320, 1350, color='indianred', alpha=0.2)
    plt.axvspan(0, 120, color='mediumseagreen', alpha=0.2)
    plt.axvspan(120, 240, color='lightgreen', alpha=0.2)
    plt.axvspan(780, 900, color="blueviolet", alpha=0.2)
    plt.axvspan(1020, 1140, color="orchid", alpha=0.2)
    plt.axvspan(1200, 1320, color='steelblue', alpha=0.2)
    plt.axvspan(1320, 1440, color='lightskyblue', alpha=0.2)
    custom_xticks = [120, 360, 600, 840, 1080, 1320] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    ax.set_xticks(custom_xticks)  
    ax.set_xticklabels(custom_labels) 
    fig.patch.set_facecolor('white')
    fig.add_artist(plt.Rectangle((0.125, 0.90), 0.064666, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.834666, 0.90), 0.064666, 0.02, transform=fig.transFigure, color="black", clip_on=False))
    fig.add_artist(plt.Rectangle((0.189666, 0.90), 0.645, 0.02, transform=fig.transFigure, edgecolor="darkred", facecolor="darkred", clip_on=False))
else: print("error conditions not defined")


# all diagrams on one sheet
fig, axes = plt.subplots(2, 2, figsize=(10, 8))

axes[0,1].plot(activity_ex["minutes"], activity_ex["normalised_average_day_ex"], label="mean", color="black")
axes[0,1].plot(activity_ex["minutes"], activity_ex["normalised_se_neg_ex"], label="SE", color="red", linestyle="solid")
axes[0,1].plot(activity_ex["minutes"], activity_ex["normalised_se_pos_ex"], color="red", linestyle="solid")
axes[0,1].set_xlabel("Zeitgeber time [h]")
axes[0,1].set_ylabel("mean activity [beam crosses/ minute]")
axes[0,1].legend()
axes[0,1].set_xlim([0, 1440])
axes[0,1].set_ylim(bottom=0, top=global_ymax.max() + 0.2)
axes[0,1].set_xticks(np.arange(0, 1441, 60), minor=True)
axes[0,1].set_title(name_ex, fontsize=14, fontweight='bold')
if conditions in ["LD 12:12", "RD 12:12"]: 
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] >= 360) & (activity_ex["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] < 360),
        color='black',
        alpha=0.5
        )
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] > 1080),
        color='black',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[0,1].set_xticks(custom_xticks)  
    axes[0,1].set_xticklabels(custom_labels)
elif conditions == "LM 12:12": 
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] >= 360) & (activity_ex["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] < 360),
        color='grey',
        alpha=0.5
        )
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] > 1080),
        color='grey',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[0,1].set_xticks(custom_xticks)  
    axes[0,1].set_xticklabels(custom_labels)
elif conditions in ["LD 20:04", "RD 20:04"]:
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] >= 120) & (activity_ex["minutes"] <= 1320),
        color='yellow',
        alpha=0.5
        )
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] < 120),
        color='black',
        alpha=0.5
        )
    axes[0,1].fill_between(
        activity_ex["minutes"],
        activity_ex["normalised_average_day_ex"],
        0,
        where=(activity_ex["minutes"] > 1320),
        color='black',
        alpha=0.5
        )
    custom_xticks = [120, 360, 600, 840, 1080, 1320]  
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    axes[0,1].set_xticks(custom_xticks)  
    axes[0,1].set_xticklabels(custom_labels)
else: print("error conditions not defined")

axes[0,0].plot(activity_c1["minutes"], activity_c1["normalised_average_day_c1"], label="mean", color="black")
axes[0,0].plot(activity_c1["minutes"], activity_c1["normalised_se_neg_c1"], label="SE", color="red", linestyle="solid")
axes[0,0].plot(activity_c1["minutes"], activity_c1["normalised_se_pos_c1"], color="red", linestyle="solid")
axes[0,0].set_xlabel("Zeitgeber time [h]")
axes[0,0].set_ylabel("mean activity [beam crosses/ minute]")
axes[0,0].legend()
axes[0,0].set_xlim([0, 1440])
axes[0,0].set_ylim(bottom=0, top=global_ymax.max() + 0.2)
axes[0,0].set_xticks(np.arange(0, 1441, 60), minor=True)
axes[0,0].set_title(name_c1, fontsize=14, fontweight='bold')
if conditions in ["LD 12:12", "RD 12:12"]: 
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] >= 360) & (activity_c1["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] < 360),
        color='black',
        alpha=0.5
        )
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] > 1080),
        color='black',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[0,0].set_xticks(custom_xticks)  
    axes[0,0].set_xticklabels(custom_labels)
elif conditions == "LM 12:12": 
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] >= 360) & (activity_c1["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] < 360),
        color='grey',
        alpha=0.5
        )
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] > 1080),
        color='grey',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[0,0].set_xticks(custom_xticks)  
    axes[0,0].set_xticklabels(custom_labels)
elif conditions in ["LD 20:04", "RD 20:04"]:
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] >= 120) & (activity_c1["minutes"] <= 1320),
        color='yellow',
        alpha=0.5
        )
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] < 120),
        color='black',
        alpha=0.5
        )
    axes[0,0].fill_between(
        activity_c1["minutes"],
        activity_c1["normalised_average_day_c1"],
        0,
        where=(activity_c1["minutes"] > 1320),
        color='black',
        alpha=0.5
        )
    custom_xticks = [120, 360, 600, 840, 1080, 1320]  
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    axes[0,0].set_xticks(custom_xticks)  
    axes[0,0].set_xticklabels(custom_labels)
else: print("error conditions not defined")

axes[1,0].plot(activity_c2["minutes"], activity_c2["normalised_average_day_c2"], label="mean", color="black")
axes[1,0].plot(activity_c2["minutes"], activity_c2["normalised_se_neg_c2"], label="SE", color="red", linestyle="solid")
axes[1,0].plot(activity_c2["minutes"], activity_c2["normalised_se_pos_c2"], color="red", linestyle="solid")
axes[1,0].set_xlabel("Zeitgeber time [h]")
axes[1,0].set_ylabel("mean activity [beam crosses/ minute]")
axes[1,0].legend()
axes[1,0].set_xlim([0, 1440])
axes[1,0].set_ylim(bottom=0, top=global_ymax.max() + 0.2)
axes[1,0].set_xticks(np.arange(0, 1441, 60), minor=True)
axes[1,0].set_title(name_c2, fontsize=14, fontweight='bold')
if conditions in ["LD 12:12", "RD 12:12"]: 
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] >= 360) & (activity_c2["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] < 360),
        color='black',
        alpha=0.5
        )
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] > 1080),
        color='black',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[1,0].set_xticks(custom_xticks)  
    axes[1,0].set_xticklabels(custom_labels)
elif conditions == "LM 12:12": 
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] >= 360) & (activity_c2["minutes"] <= 1080),
        color='yellow',
        alpha=0.5
        )
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] < 360),
        color='grey',
        alpha=0.5
        )
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] > 1080),
        color='grey',
        alpha=0.5
        )
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[1,0].set_xticks(custom_xticks)  
    axes[1,0].set_xticklabels(custom_labels)
elif conditions in ["LD 20:04", "RD 20:04"]:
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] >= 120) & (activity_c2["minutes"] <= 1320),
        color='yellow',
        alpha=0.5
        )
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] < 120),
        color='black',
        alpha=0.5
        )
    axes[1,0].fill_between(
        activity_c2["minutes"],
        activity_c2["normalised_average_day_c2"],
        0,
        where=(activity_c2["minutes"] > 1320),
        color='black',
        alpha=0.5
        )
    custom_xticks = [120, 360, 600, 840, 1080, 1320]  
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    axes[1,0].set_xticks(custom_xticks)  
    axes[1,0].set_xticklabels(custom_labels)
else: print("error conditions not defined")

axes[1,1].plot(activity_ex["minutes"], activity_ex["normalised_average_day_ex"], label=name_ex + " n = " + str(n_ex), color="red", zorder=3)
axes[1,1].plot(activity_c1["minutes"], activity_c1["normalised_average_day_c1"], label=name_c1 + " n = " + str(n_c1), color="dimgrey", linestyle="solid", zorder=2)
axes[1,1].plot(activity_c2["minutes"], activity_c2["normalised_average_day_c2"], label=name_c2 + " n = " + str(n_c2), color="silver", linestyle="solid", zorder=2)
axes[1,1].set_xlabel("Zeitgeber time [h]")
axes[1,1].set_ylabel("mean activity [beam crosses/ minute]")
axes[1,1].legend()
axes[1,1].set_xlim([0, 1440])
axes[1,1].set_ylim(bottom=0, top=global_ymax.max() + 0.1)
axes[1,1].set_xticks(np.arange(0, 1441, 60), minor=True)
axes[1,1].set_title("comparison", fontsize=14, fontweight="bold")
if conditions in ["LD 12:12", "LM 12:12", "RD 12:12"]: 
    axes[1,1].axvline(x=360, color='black', linestyle='solid', linewidth=0.5)
    axes[1,1].axvline(x=1080, color='black', linestyle='solid', linewidth=0.5)
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[1,1].set_xticks(custom_xticks)  
    axes[1,1].set_xticklabels(custom_labels)
elif conditions in ["LD 20:04", "RD 20:04"]:
    axes[1,1].axvline(x=120, color='black', linestyle='solid', linewidth=0.5)
    axes[1,1].axvline(x=1320, color='black', linestyle='solid', linewidth=0.5)
    custom_xticks = [120, 360, 600, 840, 1080, 1320] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    axes[1,1].set_xticks(custom_xticks)  
    axes[1,1].set_xticklabels(custom_labels) 
else: print("error conditions not defined")

plt.tight_layout()


# time frames for statistics
if conditions in ["LD 12:12", "LM 12:12", "RD 12:12"]:
    whole_day = activity_comparison[(activity_comparison["minutes"] >= 360) & (activity_comparison["minutes"] <= 1080)]
    early_morning = activity_comparison[(activity_comparison["minutes"] >= 180) & (activity_comparison["minutes"] <= 360)]
    late_morning = activity_comparison[(activity_comparison["minutes"] >= 360) & (activity_comparison["minutes"] <= 540)]
    early_evening = activity_comparison[(activity_comparison["minutes"] >= 900) & (activity_comparison["minutes"] <= 1080)]
    late_evening = activity_comparison[(activity_comparison["minutes"] >= 1080) & (activity_comparison["minutes"] <= 1260)]
    lights_on = activity_comparison[(activity_comparison["minutes"] >= 360) & (activity_comparison["minutes"] <= 390)]
    lights_off = activity_comparison[(activity_comparison["minutes"] >= 1080) & (activity_comparison["minutes"] <= 1110)]
    time_periods = {
    "whole day": whole_day,
    "early morning": early_morning,
    "late morning": late_morning,
    "early evening": early_evening,
    "late evening": late_evening,
    "lights-on peak": lights_on,
    "lights-off peak": lights_off,
    }
elif conditions in ["LD 20:04", "RD 20:04"]:
    whole_day = activity_comparison[(activity_comparison["minutes"] >= 120) & (activity_comparison["minutes"] <= 1320)]
    early_morning = activity_comparison[(activity_comparison["minutes"] >= 0) & (activity_comparison["minutes"] <= 120)]
    late_morning = activity_comparison[(activity_comparison["minutes"] >= 120) & (activity_comparison["minutes"] <= 240)]
    ZT12 = activity_comparison[(activity_comparison["minutes"] >= 780) & (activity_comparison["minutes"] <= 900)]
    ZT16 = activity_comparison[(activity_comparison["minutes"] >= 1020) & (activity_comparison["minutes"] <= 1140)]
    early_evening = activity_comparison[(activity_comparison["minutes"] >= 1200) & (activity_comparison["minutes"] <= 1320)]
    late_evening = activity_comparison[(activity_comparison["minutes"] >= 1320) & (activity_comparison["minutes"] <= 1440)]
    lights_on = activity_comparison[(activity_comparison["minutes"] >= 120) & (activity_comparison["minutes"] <= 150)]
    lights_off = activity_comparison[(activity_comparison["minutes"] >= 1320) & (activity_comparison["minutes"] <= 1350)]
    time_periods = {
    "whole day": whole_day,
    "early morning": early_morning,
    "late morning": late_morning,
    "ZT12": ZT12,
    "ZT16": ZT16,
    "early evening": early_evening,
    "late evening": late_evening,
    "lights-on peak": lights_on,
    "lights-off peak": lights_off,
    }
else: print("error conditions not defined")


# data for statistics
def extract_group_dataframes(time_periods):
    dataframes = {}

    for key in time_periods:
        df = time_periods[key]
        ex = df["normalised_average_day_ex"]
        c1 = df["normalised_average_day_c1"]
        c2 = df["normalised_average_day_c2"]

        dataframes[key] = pd.DataFrame({
            "values": list(ex) + list(c1) + list(c2),
            "group": (["ex"] * len(ex) +
                      ["c1"] * len(c1) +
                      ["c2"] * len(c2))
        })

    return dataframes

dataframes = extract_group_dataframes(time_periods)

if conditions in ["LD 12:12", "LM 12:12", "RD 12:12"]:  
    data_whole_day = dataframes["whole day"]
    data_lights_on = dataframes["lights-on peak"]
    data_lights_off = dataframes["lights-off peak"]
    data_early_morning = dataframes["early morning"] 
    data_late_morning = dataframes["late morning"]  
    data_early_evening = dataframes["early evening"]
    data_late_evening = dataframes["late evening"]
elif conditions in ["LD 20:04", "RD 20:04"]:
    data_whole_day = dataframes["whole day"]
    data_lights_on = dataframes["lights-on peak"]
    data_lights_off = dataframes["lights-off peak"]
    data_early_morning = dataframes["early morning"] 
    data_late_morning = dataframes["late morning"] 
    data_ZT12 = dataframes["ZT12"]
    data_ZT16 = dataframes["ZT16"]  
    data_early_evening = dataframes["early evening"]
    data_late_evening = dataframes["late evening"]
else: print("error conditions not defined")


# statistics
def process_statistics_for_all_periods(time_periods, printing="no"):
    
    results = {}
    dataframes = {}

    for key, df in time_periods.items():
        ex = df["normalised_average_day_ex"]
        c1 = df["normalised_average_day_c1"]
        c2 = df["normalised_average_day_c2"]

        data = pd.DataFrame({
            "values": list(ex) + list(c1) + list(c2),
            "group": (["ex"] * len(ex) + ["c1"] * len(c1) + ["c2"] * len(c2))
        })
        dataframes[key] = data

        # Normality test (D'Agostino-Pearson)
        groups = data['group'].unique()
        normality_results = {}
        for group_name in groups:
            group_data = data[data['group'] == group_name]['values']
            stat, p = stats.normaltest(group_data)
            normality_results[group_name] = p > 0.05

        all_normal = all(normality_results.values())

        if printing == "yes":
            print(f"\nNormality results for {key}:")
            for group, is_normal in normality_results.items():
                print(f"  {group}: {'Normal' if is_normal else 'Not normal'}")
        elif printing == "no":
            pass

        # Post-hoc test (Tukey or Dunn-Bonferroni)
        if all_normal:
            comp = mc.MultiComparison(data['values'], data['group'])
            tukey_res = comp.tukeyhsd()
            tukey_df = pd.DataFrame(
                data=tukey_res._results_table.data[1:],
                columns=tukey_res._results_table.data[0]
            )
            mat = tukey_df.pivot(index='group1', columns='group2', values='p-adj')
            mat_full = mat.copy()
            mat_full = mat_full.combine_first(mat_full.T)
            np.fill_diagonal(mat_full.values, 1.0)
            posthoc_result = mat_full
        else:
            posthoc_result = sp.posthoc_dunn(data, val_col='values', group_col='group', p_adjust='bonferroni')

        if printing == "yes":
            print(f"\nPost-hoc results for {key}:")
            print(posthoc_result)
        elif printing == "no":
            pass

        results[key] = posthoc_result
    if conditions in ["LD 12:12", "LM 12:12", "RD 12:12"]:
        posthoc_res_whole_day = results["whole day"]
        posthoc_res_early_morning = results["early morning"]
        posthoc_res_late_morning = results["late morning"]
        posthoc_res_early_evening = results["early evening"]
        posthoc_res_late_evening = results["late evening"]

        return (posthoc_res_whole_day, posthoc_res_early_morning, posthoc_res_late_morning,
            posthoc_res_early_evening, posthoc_res_late_evening)
    
    elif conditions in ["LD 20:04", "RD 20:04"]:
        posthoc_res_whole_day = results["whole day"]
        posthoc_res_early_morning = results["early morning"]
        posthoc_res_late_morning = results["late morning"]
        posthoc_res_ZT12 = results["ZT12"]
        posthoc_res_ZT16 = results["ZT16"]
        posthoc_res_early_evening = results["early evening"]
        posthoc_res_late_evening = results["late evening"]

        return (posthoc_res_whole_day, posthoc_res_early_morning, posthoc_res_late_morning, posthoc_res_ZT12, posthoc_res_ZT16,
            posthoc_res_early_evening, posthoc_res_late_evening)
    else: print("error conditions not defined")

if conditions in ["LD 12:12", "LM 12:12", "RD 12:12"]:
    if printing == "yes":
        (posthoc_res_whole_day, posthoc_res_early_morning, posthoc_res_late_morning, 
        posthoc_res_early_evening, posthoc_res_late_evening) = process_statistics_for_all_periods(time_periods, printing="yes")
    elif printing == "no":
        (posthoc_res_whole_day, posthoc_res_early_morning, posthoc_res_late_morning, 
        posthoc_res_early_evening, posthoc_res_late_evening) = process_statistics_for_all_periods(time_periods, printing="no")       
elif conditions in ["LD 20:04", "RD 20:04"]:
    if printing == "yes":
        (posthoc_res_whole_day, posthoc_res_early_morning, posthoc_res_late_morning, posthoc_res_ZT12, posthoc_res_ZT16,
        posthoc_res_early_evening, posthoc_res_late_evening) = process_statistics_for_all_periods(time_periods, printing="yes")
    elif printing == "no":
        (posthoc_res_whole_day, posthoc_res_early_morning, posthoc_res_late_morning, posthoc_res_ZT12, posthoc_res_ZT16,
        posthoc_res_early_evening, posthoc_res_late_evening) = process_statistics_for_all_periods(time_periods, printing="no")
else: print("error conditions not defined")


# boxplots
mean_columns = ["normalised_average_day_c1", "normalised_average_day_ex", "normalised_average_day_c2"]
colors = ["dimgrey", "firebrick", "silver"]
legend_labels = [name_c1 + " n = " +  str(n_c1), name_ex + " n = " + str(n_ex), name_c2 + " n = " + str(n_c2)] 

fig, ax = plt.subplots(figsize=(10, 6))
num_periods = len(time_periods)
num_means = len(mean_columns)
box_width = 0.2
offsets = np.linspace(-0.3, 0.3, num_means)

for i, (col, color) in enumerate(zip(mean_columns, colors)):
    boxplot_data = [activity_comparison[col].dropna().values for activity_comparison in time_periods.values()]
    positions = np.arange(num_periods) + offsets[i]
    bp = ax.boxplot(boxplot_data, positions=positions, widths=box_width, patch_artist=True)
    for box in bp['boxes']:
        box.set(facecolor=color, alpha=1)

positions = np.arange(num_periods) + i * 0.2  
ax.set_xlim(- 0.5, len(time_periods)-0.5)
ax.set_xticks(np.arange(num_periods))
ax.set_xticklabels([label.replace(" ", "\n") for label in time_periods.keys()])
ax.set_ylabel("mean activity [beam crosses/ minute]")
ax.set_title("activity comparison", fontsize=14, fontweight="bold")

for i in range(0, len(time_periods)-1): 
    ax.axvline(i + 0.5, color='black', linestyle='solid', linewidth=1)

if conditions in ["LD 12:12", "LM 12:12", "RD 12:12"]:
        background_colors = ["white", "mediumseagreen", "lightgreen", "steelblue", "lightskyblue", "indianred", "indianred"]
        for i in range(len(time_periods)):
            ax.axvspan(i - 0.5, i + 0.5, color=background_colors[i], alpha=0.2) 
elif conditions in ["LD 20:04", "RD 20:04"]:
        background_colors = ["white", "mediumseagreen", "lightgreen", "blueviolet", "orchid", "steelblue", "lightskyblue", "indianred", "indianred"]
        for i in range(len(time_periods)):
            ax.axvspan(i - 0.5, i + 0.5, color=background_colors[i], alpha=0.2)  

ax.legend(handles=[plt.Rectangle((0, 0), 1, 1, color=c, ec="black") for c in colors], 
          labels=legend_labels, loc="upper center", bbox_to_anchor=(0.5, -0.075), ncol=3, frameon=False)

def significance_stars(p_value):
    if p_value < 0.001:
        return '***'  
    elif p_value < 0.01:
        return '**'   
    elif p_value < 0.05:
        return '*'    
    else:
        return 'ns'

comparisons = [("ex", "c1"), ("ex", "c2"), ("c1", "c2")]

if conditions in ["LD 12:12", "LM 12:12", "RD 12:12"]:
    posthoc_results = [
    ("whole day", posthoc_res_whole_day),
    ("early morning", posthoc_res_early_morning),
    ("late morning", posthoc_res_late_morning),
    ("early evening", posthoc_res_early_evening),
    ("late evening", posthoc_res_late_evening),
    ]
elif conditions in ["LD 20:04", "RD 20:04"]:
    posthoc_results = [
    ("whole day", posthoc_res_whole_day),
    ("early morning", posthoc_res_early_morning),
    ("late morning", posthoc_res_late_morning),
    ("ZT12", posthoc_res_ZT12),
    ("ZT16", posthoc_res_ZT16),
    ("early evening", posthoc_res_early_evening),
    ("late evening", posthoc_res_late_evening),
    ]
else: print("error conditions not defined")

for period_idx, (period_name, posthoc_df) in enumerate(posthoc_results):
    y_offset_base = 0.15
    y_step = 0.2
    
    for offset_idx, (group1, group2) in enumerate(comparisons):
        try:
            p_val = posthoc_df.loc[group1, group2]
        except KeyError:
             p_val = posthoc_df.loc[group2, group1]
        stars = significance_stars(p_val)
        x1 = period_idx + offsets[mean_columns.index(f"normalised_average_day_{group1}")]
        x2 = period_idx + offsets[mean_columns.index(f"normalised_average_day_{group2}")]
        max_y = max(time_periods[period_name][f"normalised_average_day_{group}"].max() for group in ["ex", "c1", "c2"])
        y = max_y + y_offset_base + (offset_idx * y_step)
               
        plt.plot([x1, x1, x2, x2], [y, y + 0.02, y + 0.02, y], lw=1.5, color='black')
        plt.text((x1 + x2) / 2, y + 0.04, stars, ha='center', fontsize=12, color='black')


# diagrams for BA
fig, axes = plt.subplots(2, 1, figsize=(6.6,10))
plt.subplots_adjust(hspace=0.4)

axes[0].plot(activity_ex["minutes"], activity_ex["normalised_average_day_ex"], label=name_ex + " n = " + str(n_ex), color="red", zorder=3)
axes[0].plot(activity_c1["minutes"], activity_c1["normalised_average_day_c1"], label=name_c1 + " n = " + str(n_c1), color="dimgrey", linestyle="solid", zorder=2)
axes[0].plot(activity_c2["minutes"], activity_c2["normalised_average_day_c2"], label=name_c2 + " n = " + str(n_c2), color="silver", linestyle="solid", zorder=2)
axes[0].set_xlabel("Zeitgeber time [h]")
axes[0].set_ylabel("mean activity [beam crosses/ minute]")
axes[0].legend()
axes[0].set_xlim([0, 1440])
axes[0].set_ylim(bottom=0, top=global_ymax.max() + 0.1)
axes[0].set_xticks(np.arange(0, 1441, 60), minor=True)
axes[0].set_title("A", fontsize=14, fontweight="bold", loc="left", pad=20)
if conditions == "LD 12:12": 
    axes[0].axvline(x=360, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvline(x=1080, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvspan(360, 390, color='indianred', alpha=0.2)
    axes[0].axvspan(1080, 1110, color='indianred', alpha=0.2)
    axes[0].axvspan(180, 360, color='mediumseagreen', alpha=0.2)
    axes[0].axvspan(360, 540, color='lightgreen', alpha=0.2)
    axes[0].axvspan(900, 1080, color='steelblue', alpha=0.2)
    axes[0].axvspan(1080, 1260 , color='lightskyblue', alpha=0.2)
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[0].set_xticks(custom_xticks)  
    axes[0].set_xticklabels(custom_labels)
    fig.patch.set_facecolor('white')
    axes[0].add_patch(patches.Rectangle(
    (0, 1.02), 360/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (1080/1440, 1.02), 360/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (360/1440, 1.02), 720/1440, 0.05,
    transform=axes[0].transAxes,
    facecolor='white',
    edgecolor='black',
    clip_on=False
    ))
elif conditions == "RD 12:12": 
    axes[0].axvline(x=360, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvline(x=1080, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvspan(360, 390, color='indianred', alpha=0.2)
    axes[0].axvspan(1080, 1110, color='indianred', alpha=0.2)
    axes[0].axvspan(180, 360, color='mediumseagreen', alpha=0.2)
    axes[0].axvspan(360, 540, color='lightgreen', alpha=0.2)
    axes[0].axvspan(900, 1080, color='steelblue', alpha=0.2)
    axes[0].axvspan(1080, 1260 , color='lightskyblue', alpha=0.2)
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[0].set_xticks(custom_xticks)  
    axes[0].set_xticklabels(custom_labels)
    fig.patch.set_facecolor('white')
    axes[0].add_patch(patches.Rectangle(
    (0, 1.02), 360/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (1080/1440, 1.02), 360/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (360/1440, 1.02), 720/1440, 0.05,
    transform=axes[0].transAxes,
    facecolor='darkred',
    edgecolor='darkred',
    clip_on=False
    ))
elif conditions == "LM 12:12": 
    axes[0].axvline(x=360, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvline(x=1080, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvspan(360, 390, color='indianred', alpha=0.2)
    axes[0].axvspan(1080, 1110, color='indianred', alpha=0.2)
    axes[0].axvspan(180, 360, color='mediumseagreen', alpha=0.2)
    axes[0].axvspan(360, 540, color='lightgreen', alpha=0.2)
    axes[0].axvspan(900, 1080, color='steelblue', alpha=0.2)
    axes[0].axvspan(1080, 1260 , color='lightskyblue', alpha=0.2)
    custom_xticks = [360, 600, 840, 1080, 1320, 120] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"] 
    axes[0].set_xticks(custom_xticks)  
    axes[0].set_xticklabels(custom_labels)
    fig.patch.set_facecolor('white')
    axes[0].add_patch(patches.Rectangle(
    (0, 1.02), 360/1440, 0.05,
    transform=axes[0].transAxes,
    color='grey',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (1080/1440, 1.02), 360/1440, 0.05,
    transform=axes[0].transAxes,
    color='grey',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (360/1440, 1.02), 720/1440, 0.05,
    transform=axes[0].transAxes,
    facecolor='white',
    edgecolor='grey',
    clip_on=False
    ))
elif conditions == "LD 20:04":
    axes[0].axvline(x=120, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvline(x=1320, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvspan(120, 150, color='indianred', alpha=0.2)
    axes[0].axvspan(1320, 1350, color='indianred', alpha=0.2)
    axes[0].axvspan(0, 120, color='mediumseagreen', alpha=0.2)
    axes[0].axvspan(120, 240, color='lightgreen', alpha=0.2)
    axes[0].axvspan(780, 900, color="blueviolet", alpha=0.2)
    axes[0].axvspan(1020, 1140, color="orchid", alpha=0.2)
    axes[0].axvspan(1200, 1320, color='steelblue', alpha=0.2)
    axes[0].axvspan(1320, 1440, color='lightskyblue', alpha=0.2)
    custom_xticks = [120, 360, 600, 840, 1080, 1320] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    axes[0].set_xticks(custom_xticks)  
    axes[0].set_xticklabels(custom_labels) 
    fig.patch.set_facecolor('white')
    axes[0].add_patch(patches.Rectangle(
    (0, 1.02), 120/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (1320/1440, 1.02), 120/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (120/1440, 1.02), 1200/1440, 0.05,
    transform=axes[0].transAxes,
    facecolor='white',
    edgecolor='black',
    clip_on=False
    ))
elif conditions == "RD 20:04":
    axes[0].axvline(x=120, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvline(x=1320, color='black', linestyle='solid', linewidth=0.5)
    axes[0].axvspan(120, 150, color='indianred', alpha=0.2)
    axes[0].axvspan(1320, 1350, color='indianred', alpha=0.2)
    axes[0].axvspan(0, 120, color='mediumseagreen', alpha=0.2)
    axes[0].axvspan(120, 240, color='lightgreen', alpha=0.2)
    axes[0].axvspan(780, 900, color="blueviolet", alpha=0.2)
    axes[0].axvspan(1020, 1140, color="orchid", alpha=0.2)
    axes[0].axvspan(1200, 1320, color='steelblue', alpha=0.2)
    axes[0].axvspan(1320, 1440, color='lightskyblue', alpha=0.2)
    custom_xticks = [120, 360, 600, 840, 1080, 1320] 
    custom_labels = ["ZT 0", "ZT 4", "ZT 8", "ZT 12", "ZT 16", "ZT 20"]  
    axes[0].set_xticks(custom_xticks)  
    axes[0].set_xticklabels(custom_labels) 
    fig.patch.set_facecolor('white')
    axes[0].add_patch(patches.Rectangle(
    (0, 1.02), 120/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (1320/1440, 1.02), 120/1440, 0.05,
    transform=axes[0].transAxes,
    color='black',
    clip_on=False
    ))
    axes[0].add_patch(patches.Rectangle(
    (120/1440, 1.02), 1200/1440, 0.05,
    transform=axes[0].transAxes,
    facecolor='darkred',
    edgecolor='darkred',
    clip_on=False
    ))
else: print("error conditions not defined")

for i, (col, color) in enumerate(zip(mean_columns, colors)):
    boxplot_data = [activity_comparison[col].dropna().values for activity_comparison in time_periods.values()]
    positions = np.arange(num_periods) + offsets[i]
    bp = axes[1].boxplot(boxplot_data, positions=positions, widths=box_width, patch_artist=True)
    for box in bp['boxes']:
        box.set(facecolor=color, alpha=1)

positions = np.arange(num_periods) + i * 0.2  
axes[1].set_xlim(- 0.5, len(time_periods)-0.5)
axes[1].set_xticks(np.arange(num_periods))
axes[1].set_xticklabels([label.replace(" ", "\n") for label in time_periods.keys()], fontsize=8)
axes[1].set_ylabel("mean activity [beam crosses/ minute]")
axes[1].set_title("B", fontsize=14, fontweight="bold", loc="left")

for i in range(0, len(time_periods)-1): 
    axes[1].axvline(i + 0.5, color='black', linestyle='solid', linewidth=1)

for i in range(len(time_periods)):
    axes[1].axvspan(i - 0.5, i + 0.5, color=background_colors[i], alpha=0.2)   

axes[1].legend(handles=[plt.Rectangle((0, 0), 1, 1, color=c, ec="black") for c in colors], 
          labels=legend_labels, loc="upper center", bbox_to_anchor=(0.5, -0.15), ncol=3, frameon=False)

for period_idx, (period_name, posthoc_df) in enumerate(posthoc_results):
    y_offset_base = 0.15
    y_step = 0.4
    
    for offset_idx, (group1, group2) in enumerate(comparisons):
        try:
            p_val = posthoc_df.loc[group1, group2]
        except KeyError:
             p_val = posthoc_df.loc[group2, group1]
        stars = significance_stars(p_val)
        x1 = period_idx + offsets[mean_columns.index(f"normalised_average_day_{group1}")]
        x2 = period_idx + offsets[mean_columns.index(f"normalised_average_day_{group2}")]
        max_y = max(time_periods[period_name][f"normalised_average_day_{group}"].max() for group in ["ex", "c1", "c2"])
        y = max_y + y_offset_base + (offset_idx * y_step)

        current_ylim = plt.gca().get_ylim()
        plt.ylim(current_ylim[0], current_ylim[1] * 1.022)
               
        plt.plot([x1, x1, x2, x2], [y, y + 0.02, y + 0.02, y], lw=1.5, color='black')
        plt.text((x1 + x2) / 2, y + 0.04, stars, ha='center', fontsize=12, color='black')


plt.show(block=False)
plt.show()
